#!/usr/bin/env bash
# dbus-send instead of qdbus
# You can replace qdbus bundled with Qt with more common dbus-send. For
# example, to show/hide Yakuake:
# dbus-send --type=method_call --dest=org.kde.yakuake /yakuake/window org.kde.yakuake.toggleWindowState

# YAKUAKEDBUS=qdbus
YAKUAKEDBUS=dbus-send
function log() {
  # Usage:
  #  log "INFO some info message"
  #  log "DEBUG some debug message"
  #  log "WARN some warning message"
  #  log "ERROR some really ERROR message"
  #  log "FATAL some really fatal message"
  #  shellcheck disable=SC2155
  local type_of_msg=$(echo "${@}" | cut -d" " -f1)
  # shellcheck disable=SC2155
  local msg=$(echo "${@}" | cut -d" " -f2-)
  local _datum=$(date "+%Y.%m.%d-%H:%M:%S %Z")
  case "${type_of_msg}" in
    INFO*)  echo -en " ${PURPLE_BLUE-}[${GRAY241-}" ;;
    ERROR*) echo -en " ${PURPLE-}[${RED-}" ;;
    *)  echo -en " ${PURPLE_BLUE-}[${YELLOW226-}" ;;
  esac
  echo -en "${type_of_msg}"
  case "${type_of_msg}" in
    ERROR*) echo -e "${PURPLE-}] ${GRAY200-}${_datum}${RED89-}[${RED126-}$$${RED89-}] ${RED126-}${msg}${RESET-}" ;;
    *)  echo -e "${PURPLE_BLUE-}] ${GRAY238-}${_datum}${RED89-}[${RED126-}$$${RED89-}] ${CYAN60-}${msg}${RESET-}" ;;
  esac
} # end log

function load_global_colors(){
  [[ -z "${BLACK-}" ]] && BLACK="\\033[38;5;16m"
  [[ -z "${BRIGHT_BLUE87-}" ]] && BRIGHT_BLUE87="\\033[38;5;87m"
  [[ -z "${CYAN-}" ]] && CYAN="\\033[38;5;123m"
  [[ -z "${CYAN60-}" ]] && CYAN60="\\033[38;5;60m"
  [[ -z "${GRAY241-}" ]] && GRAY241="\\033[38;5;241m"
  [[ -z "${GRAY200-}" ]] && GRAY200="\\033[38;5;200m"
  [[ -z "${GRAY238-}" ]] && GRAY238="\\033[38;5;238m"
  [[ -z "${GREEN-}" ]] && GREEN="\\033[38;5;22m"
  [[ -z "${PURPLE_BLUE-}" ]] && PURPLE_BLUE="\\033[38;5;93m"
  [[ -z "${PURPLE-}" ]] && PURPLE="\\033[01;35m"
  [[ -z "${RED-}" ]] && RED="\\033[38;5;1m"
  [[ -z "${RED89-}" ]] && RED89="\\033[38;5;89m"
  [[ -z "${RED126-}" ]] && RED126="\\033[38;5;126m"
  [[ -z "${RESET_PROMPT-}" ]] && RESET_PROMPT="[0m"
  [[ -z "${RESET-}" ]] && RESET="\\033[0m"
  [[ -z "${YELLOW220-}" ]] && YELLOW220="\\033[38;5;220m"
  [[ -z "${YELLOW226-}" ]] && YELLOW226="\\033[38;5;226m"
  [[ -z "${YELLOW-}" ]] && YELLOW="\\033[01;33m"
  [[ -z "${FROM_MAGENTA_NOT_VISIBLE-}" ]] && FROM_MAGENTA_NOT_VISIBLE="\\033[39m\\033[38;5;124m"
} # end load_global_colors
load_global_colors

function qdbus() {
  local -i _err=0
  >&2 log INFO qdbus "${*}"
  (
    eval """$(which qdbus) ${*:-}"""
  )
  _err=$?
  [ ${_err} -gt 0 ] && >&2 log ERROR qdbus "${*}"
} # end qdbus

function pront() {
  >&2 log INFO echo "${*}"
  (
    echo  """${*:-}"""
  )
} # end pront

# REF: https://wiki.archlinux.org/title/Yakuake
function load_tabs() {
  local -i TERMINAL_ID_=0
  local -i SESSION_ID_=0
  local TERMINALS_=""
  local LAST_UUID_ID_=""
  local -i DEBUG
  DEBUG=0
  local -i LIMIT_COUNTER
  LIMIT_COUNTER=0
  if [[ "${2}" == '--debug' ]] ; then
  {
    clear
    DEBUG=1
    set -xu
    if [ -n ${3-} ] && [ ${3-} -gt 0 ] ; then
    {
      LIMIT_COUNTER=${2}
    }
    fi
  }
  else
  {
    DEBUG=0
    # set +xu
  }
  fi
  local _sessions=""
  if [[ -f "${1}" ]] ; then
  {
    _sessions="$(grep -vE '^\s+#|^#'<"${1}")"
  }
  else
  {
    >&2 log ERROR filename "Was not found. Expected $0 --debug 3 or $0 filename_list"
    # >&2 log INFO sample "#This is sample filename_list contents:
    >&2 echo "w 
    #	_sessions=\"
    simple|backend|/home/work/username/projects/api|bundle exec rails s|split|/home/work/username/projects/back|git pull|
    flat|frontend|/home/work/username/projects/front|npm run dev|split|/home/work/username/projects/front|npm run doc-center|
    vertical|sidekiq|/home/work/username/projects/sidekiqx
    simple|db|/home/work/username/projects/data|ls|split|/home/work/username/projects/db|ls|
    quad|tests|/home/work/username/projects/test
    simple|push|/home/work/username/projects/project|git status|split|/home/work/username/projects/project|git pull|
    horizontal|project|/home/work/username/projects/project|
    simple|home|/home/work/username|ls|split|/home/work/username/files|ls|
    vertical|prestalgo|/home/work/username/projects/project|cmatrix -n 9|
    # use hashtags to ignore lines
    #\"
    simple|backend|/home/work/username/projects/api|neofetch|right-25|/home/work/username/projects/api|cmatrix|bottom-50|/home/work/username/projects/api|bpytop|bottom-25|/home/work/username/projects/api|git pull|
	#This will create a split terminal as shown on diagram below.
	#+--------------------------------+--------------------------------+
	#|TerminalID=0 (runs neofetch)    |TerminalID=1 (runs cmatrix)     |
	#|                                +--------------------------------+
	#|                                |TerminalID=2 (runs bpytop)      |
	#|                                |                                |
	#|                                |                                |
	#|                                |                                |
	#|                                |                                |
	#|                                |                                |
	#|                                |                                |
	#|                                +--------------------------------+
	#|                                |TerminalID=3 (runs git pull)    |
	#+--------------------------------+--------------------------------+


    "
    exit 1
  }
  fi
  local -i _counter
  _counter=0
  local -i _alt_counter
  _alt_counter=1
  # Get and array or list of sessions, expected number return: 1
  local -i _total_sessions=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)

  # local _current_sessions=""
  # Get and array or list of sessions, expeted return:  "0,1,2,3"
  # local _current_sessions="$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.sessionIdList | sed 's/,/\n/g' | sort -n)"

  local -i _num=0
  while [ ${_counter} -lt ${_total_sessions} ] ; do
  {
    (( _counter++ ))
    (( _alt_counter++ ))
  }
  done
  echo "DEBUG     _counter:${_counter}"
  echo "DEBUG _alt_counter:${_alt_counter}"
  # exit 0
  local _session_start_type _one _title _path _path2 _run _run2 _split SESSION_ID_ TERMINAL_ID_
  local _split3  _path3  _run3
  local _yakuake_path_and_run _yakuake_set_title
  function _yakuake_split() {
    pront "${0} ${LINENO} ${FUNCNAME[0]}"
    if [[ -n "${_split-}" ]] ; then
    {
      echo "split:${_split} Get a new TERMINAL_ID from the SPLIT of targeting TERMINAL_ID:$TERMINAL_ID_"
      if [[ "${_split}" == *"split"* ]] || [[ ${_split}==*"left"* ]] ; then
      {
        (( DEBUG )) && pront " +-- Change split Terminal:${_counter} Splt?:${_split}"
        {
          # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-vertical)
          # (( DEBUG )) || TERMINAL_ID_=$(guake -n guake -e """ls""" guake -r "test" --split-vertical)
          # (( DEBUG )) || TERMINAL_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.splitTerminalLeftRight "$TERMINAL_ID_")
          (( DEBUG )) || TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50)
          (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
          (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
          (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
          (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
          (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
          local i _counting=0
          local _numbers_with_commas="0"
          while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
          {
            _numbers_with_commas="${_numbers_with_commas},${_counting}"
            (( _counting++ ))
          }
          done
          TERMINALS_="${_numbers_with_commas}"
          (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
          (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal ${LAST_TERMINAL_IN_TAB_}
          wait
        }
        wait
      }
      fi
      if [[ "${_split}" == *"right"* ]] ; then
      {
        (( DEBUG )) && pront " +-- Change split Terminal:${_counter} Splt?:${_split}"
        {
          # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-vertical)
          # (( DEBUG )) || TERMINAL_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.splitTerminalLeftRight "$TERMINAL_ID_")
          (( DEBUG )) || TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50)
          (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
          (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
          (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
          (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
          (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
          local i _counting=0
          local _numbers_with_commas="0"
          while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
          {
            _numbers_with_commas="${_numbers_with_commas},${_counting}"
            (( _counting++ ))
          }
          done
          TERMINALS_="${_numbers_with_commas}"
          (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
          (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal ${LAST_TERMINAL_IN_TAB_}
          wait
        }
        wait
      }
      fi
      if [[ "${_split}" == *"bottom"* ]] ; then
      {
        (( DEBUG )) && pront " +-- Change split Terminal:${_counter} Splt?:${_split}"
        {
          # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-horizontal)
          # (( DEBUG )) || TERMINAL_ID_=(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.splitTerminalTopBottom "$TERMINAL_ID_")
          (( DEBUG )) || TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.h_split_current_terminal 50)
          (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
          (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
          (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
          (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
          (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
          local i _counting=0
          local _numbers_with_commas="0"
          while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
          {
            _numbers_with_commas="${_numbers_with_commas},${_counting}"
            (( _counting++ ))
          }
          done
          TERMINALS_="${_numbers_with_commas}"
          (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
          (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal ${LAST_TERMINAL_IN_TAB_}
          wait
        }
        wait
      }
      fi
      if [[ "${_split}" == *"top"* ]] ; then
      {
        (( DEBUG )) && pront " +-- Change split Terminal:${_counter} Splt?:${_split}"
        {
          # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-horizontal)
          # (( DEBUG )) || TERMINAL_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.splitTerminalTopBottom "$TERMINAL_ID_")
          (( DEBUG )) || TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.h_split_current_terminal 50)
          (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
          (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
          (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
          (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
          (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
          (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
          local i _counting=0
          local _numbers_with_commas="0"
          while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
          {
            _numbers_with_commas="${_numbers_with_commas},${_counting}"
            (( _counting++ ))
          }
          done
          TERMINALS_="${numbers_with_commas}"
          (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
          (( DEBUG )) ||	>&2 log INFO LAST_TERMINAL_IN_TAB_: "${LAST_TERMINAL_IN_TAB_}"
          (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal ${LAST_TERMINAL_IN_TAB_}
          wait
        }
        wait
      }
      fi
      # {
      #   (( DEBUG )) || TERMINAL_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.terminalIdsForSessionId "$SESSION_ID_")
      #   wait
      # }
      # wait
      # qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.splitTerminalTopBottom "$TERMINAL_ID_1"
      # pront "split:path und run on bottom SESSION_ID_=$SESSION_ID_ , TERMINAL_ID_=$TERMINAL_ID_ , path:$_path , path2:$_path2 , run:$_run , run2:$_run2,one:$_one"
      # _path2="$(cut -d'|' -f6 <<< ${_one})"
      # [ -z ${_path2} ] && _path2="${_path}"
      # _path="${_path2}"
      # _run="${_run2}"
      # pront "split SESSION_ID_=$SESSION_ID_ , TERMINAL_ID_=$TERMINAL_ID_ , path:$_path , path2:$_path2 , run:$_run , run2:$_run2,one:$_one"
      # _yakuake_path_and_run
    }
    fi
  } # end _yakuake_split
  function _yakuake_set_title() {
    pront "${0} ${LINENO} ${FUNCNAME[0]}"
    if [[ -n "${_title}" ]] ; then
    {
      local _title_new="$(sed 's/\ /\\ /g' <<< "${_alt_counter}.${_title}")"
      (( DEBUG )) && pront " +-- Change title Terminal:${_counter} Title:${_title_new}"
      # (( DEBUG )) || qdbus org.kde.yakuake /yakuake/tabs setTabTitle ${SESSION_ID_} "${_title_new}"
      # (( DEBUG )) || guake -r  "${_title_new}"
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.rename_current_tab "${_title_new}"
      # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.rename_tab_uuid "${LAST_UUID_ID_}" "${_title_new}"
      # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.rename_tab ${SESSION_ID_}  "${_title_new}"
    }
    fi
  } # end _yakuake_set_title
  function _yakuake_path_and_run() {
    (( DEBUG )) &&	pront " +-- Testing  counter:${_counter} -n _path:${_path} and -n _run:${_run} "
    if [[ -n "${_path:-}" ]] && \
       [[ -n "${_run}" ]]  ; then
    {
        (( DEBUG )) && pront " +-- Change _path Terminal:${_counter} Path:${_path} and run Run:${_run} "
        pront "path&run SESSION_ID_=$SESSION_ID_ , TERMINAL_ID_=$TERMINAL_ID_ , path:$_path , path2:$_path2 , run:$_run , run2:$_run2,one:$_one"
        # (( DEBUG )) || qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal ${TERMINAL_ID_} "\"cd '${_path}' && ${_run}\""
        # (( DEBUG )) ||  guake -n guake -e """\"cd '${_path}' && ${_run}\"""" guake -r "${_title_new}"
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_by_uuid "${LAST_UUID_ID_}" "cd '${_path}' && ${_run}"
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_by_uuid "${LAST_UUID_ID_}" "\"cd '${_path}' && ${_run}\""
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_current_termbox "cd '${_path}' && ${_run}"
        (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command "\"cd '${_path}' && ${_run}\""
    }
    else
    {
      if [[ -n "${_path}" ]] ; then
      {
        (( DEBUG )) && pront " +-- Change _path Terminal:${_counter} Path:${_path}"
        pront "path only SESSION_ID_=$SESSION_ID_ , TERMINAL_ID_=$TERMINAL_ID_ , path:$_path , path2:$_path2 , run:$_run , run2:$_run2,one:$_one"
        # (( DEBUG )) || qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal ${TERMINAL_ID_} "\"cd '${_path}'\""
        # (( DEBUG )) ||  guake -n guake -e """\"cd '${_path}'\"""" guake -r "${_title_new}"
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_by_uuid "${LAST_UUID_ID_}" "cd '${_path}'"
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_by_uuid "${LAST_UUID_ID_}" "\"cd '${_path}'\""
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_current_termbox "cd '${_path}'"
        (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command "\"cd '${_path}'\""
      }
      elif [[ -n "${_run}" ]] ; then
      {
        (( DEBUG )) && pront " +-- Change execute Terminal:${_counter} Run:${_run}"
        pront "run only SESSION_ID_=$SESSION_ID_ , TERMINAL_ID_=$TERMINAL_ID_ , path:$_path , path2:$_path2 , run:$_run , run2:$_run2,one:$_one"
        # (( DEBUG )) || qdbus org.kde.yakuake /yakuake/sessions runCommandInTerminal ${TERMINAL_ID_} "\"${_run}\""
        # (( DEBUG )) ||  guake -n guake -e """\"${_run}\"""" guake -r "${_title_new}"
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_by_uuid "${LAST_UUID_ID_}" "${_run}"
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_by_uuid "${LAST_UUID_ID_}" "\"${_run}\""
        # (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command_current_termbox "${_run}"
        (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.execute_command "\"${_run}\""
      }
      fi
    }
    fi
  } # end local _yakuake_path_and_run
  function _yakuake_add_tab() {
    pront "${0} ${LINENO} ${FUNCNAME[0]}"
    {
      # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-horizontal)
      # (( DEBUG )) || SESSION_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.addSession)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.add_tab)
      (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
      (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
      (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
      (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
      local i _counting=0
      local _numbers_with_commas="0"
      while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
      {
        _numbers_with_commas="${_numbers_with_commas},${_counting}"
        (( _counting++ ))
      }
      done
      TERMINALS_="${_numbers_with_commas}"
      (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
      wait
    }
    wait
    {
      # (( DEBUG )) || TERMINAL_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.terminalIdsForSessionId "$SESSION_ID_")
      wait
    }
    wait
  } # end _yakuake_add_tab
  function _yakuake_add_tab_quad() {
    pront "${0} ${LINENO} ${FUNCNAME[0]}"
    {
      # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-vertical)
      # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-horizontal)
      # (( DEBUG )) || SESSION_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.addSessionQuad)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.add_tab)
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.h_split_current_terminal 50
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal  0
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50
      (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
      (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
      (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
      (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
      (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
      wait
    }
    wait
    {
      # Expected TERMINALS_ to have 1,2,3,4,5,6 values
      # (( DEBUG )) || TERMINALS_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.terminalIdsForSessionId "$SESSION_ID_")
      local i _counting=0
      local _numbers_with_commas="0"
      while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
      {
        _numbers_with_commas="${_numbers_with_commas},${_counting}"
        (( _counting++ ))
      }
      done
      TERMINALS_="${_numbers_with_commas}"
      (( DEBUG )) || TERMINAL_ID_=-1
      wait
    }
    wait
  } # end _yakuake_add_tab_quad
  function _yakuake_add_tab_two_horizontal() {
    pront "${0} ${LINENO} ${FUNCNAME[0]}"
    {
      # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-horizontal)
      # (( DEBUG )) || SESSION_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.addSessionTwoHorizontal)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.add_tab)
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.h_split_current_terminal 50
      # qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50
      # qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal  0
      # qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50
      (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
      (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
      (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
      (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
      (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
      wait
    }
    wait
    {
      # Expected TERMINALS_ to have 1,2,3,4,5,6 values
      # (( DEBUG )) || TERMINALS_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.terminalIdsForSessionId "$SESSION_ID_")
      local i _counting=0
      local _numbers_with_commas="0"
      while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
      {
        _numbers_with_commas="${_numbers_with_commas},${_counting}"
        (( _counting++ ))
      }
      done
      TERMINALS_="${_numbers_with_commas}"
      (( DEBUG )) || TERMINAL_ID_=-1
      wait
    }
    wait
  } # end _yakuake_add_tab_two_horizontal
  function _yakuake_add_tab_two_vertical() {
    pront "${0} ${LINENO} ${FUNCNAME[0]}"
    {
      # (( DEBUG )) || TERMINAL_ID_=$(guake  --split-vertical)
      # (( DEBUG )) || SESSION_ID_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.addSessionTwoVertical)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.add_tab)
      # qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.h_split_current_terminal 50
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50
      # qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal  0
      # qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.v_split_current_terminal 50
      (( DEBUG )) || TOTAL_TERMINAL_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_terminals_count)
      (( DEBUG )) || SESSION_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || TOTAL_TABS_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_pages_count)
      (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
      (( DEBUG )) || TERMINAL_NUMBER_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_terminal)
      (( DEBUG )) || LAST_TAB_LABEL_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_tablabel)
      (( DEBUG )) || TERMINALS_COUNT_INSIDE_TAB_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_term_count_for_current_page)
      (( DEBUG )) || LAST_TERMINAL_IN_TAB_=$(( TERMINALS_COUNT_INSIDE_TAB_  - 1 ))
      wait
    }
    wait
    {
      # Expected TERMINALS_ to have 1,2,3,4,5,6 values
      # (( DEBUG )) || TERMINALS_=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.terminalIdsForSessionId "$SESSION_ID_")
      local i _counting=0
      local _numbers_with_commas="0"
      while [ ${_counting} -lt ${TERMINALS_COUNT_INSIDE_TAB_} ] ; do
      {
        _numbers_with_commas="${_numbers_with_commas},${_counting}"
        (( _counting++ ))
      }
      done
      TERMINALS_="${_numbers_with_commas}"
      (( DEBUG )) || TERMINAL_ID_=-1
      wait
    }
    wait
  } # end _yakuake_add_tab_two_vertical

  while read -r _one ; do
  {
    pront "${0} ${LINENO} ${FUNCNAME[0]} while main loop"
    SESSION_ID_=-1
    TERMINALS_=""
    TERMINAL_ID_=-1
    _session_start_type=""
    _title=""
    _path=""
    _run=""
    _split=""
    _path2=""
    _run2=""
    _split3=""
    _path3=""
    _run3=""
    [ -z "${_one}" ] && continue
    _session_start_type="$(cut -d'|' -f1 <<< ${_one})"
    _title="$(cut -d'|' -f2 <<< ${_one})"
    _path="$(cut -d'|' -f3 <<< ${_one})"
    _run="$(cut -d'|' -f4 <<< ${_one})"
    _split="$(cut -d'|' -f5 <<< ${_one})"
    _path2="$(cut -d'|' -f6 <<< ${_one})"
    _run2="$(cut -d'|' -f7 <<< ${_one})"
    _split3="$(cut -d'|' -f8 <<< ${_one})"
    _path3="$(cut -d'|' -f9 <<< ${_one})"
    _run3="$(cut -d'|' -f10 <<< ${_one})"
     pront "Terminal ${_alt_counter} "
    case "${_session_start_type}" in
      simple*) _yakuake_add_tab ;;
      flat*) _yakuake_add_tab ;;
      quad*) _yakuake_add_tab_quad ;;
      horizontal*) _yakuake_add_tab_two_horizontal ;;
      vertical*) _yakuake_add_tab_two_vertical ;;
      *) _yakuake_add_tab ;;
    esac
    # _yakuake_add_tab
    # qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.addSession
    _yakuake_set_title
    if [[ -n "${TERMINALS_}" ]] && [ ${TERMINAL_ID_} -eq -1 ]  ; then
    {
      local _terminal_list="$(sed 's/,/\n/g' <<< "${TERMINALS_}" | sort -n)"
      (
        >&2 log INFO TERMINALS_: "${TERMINALS_}"
        >&2 log INFO _terminal_list: "${_terminal_list}"
        local i _split_counting=0
        while read -r TERMINAL_ID_ ; do
         {
          [[ TERMINAL_ID_} -lt 0 ]] && continue
          >&2 log INFO TERMINAL_ID_: "${TERMINAL_ID_}"
          >&2 log INFO _path: "${_path}"
          >&2 log INFO  _run: "${_run}"
          (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal  ${TERMINAL_ID_}
          (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
          (( DEBUG )) || _yakuake_path_and_run
          (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
          if [[ -n "${_split}" ]] ; then
          {
            (( DEBUG )) || _yakuake_split
            if [[ -n "${_path2}" ]] ; then
            {
              _path="${_path2}"
            }
            fi
            if [[ -n "${_run2}" ]] ; then
            {
              _run="${_run2}"
            }
            fi
            >&2 log INFO _path: "${_path}"
            >&2 log INFO  _run: "${_run}"
            (( DEBUG )) || _yakuake_path_and_run
          }
          fi
          if [[ -n "${_split3}" ]] ; then 
          {
            (( DEBUG )) || _yakuake_split
            if [[ -n "${_path3}" ]] ; then
            {
              _path="${_path3}"
            }
            fi
            if [[ -n "${_run3}" ]] ; then
            {
              _run="${_run3}"
            }
            fi
            >&2 log INFO _path: "${_path}"
            >&2 log INFO  _run: "${_run}"
            (( DEBUG )) || _yakuake_path_and_run
          }
          fi
          >&2 log INFO  _split_counting: "${_split_counting}"
          (( _split_counting++ ))
        }
        done <<< "${_terminal_list}"
      )
    }
    elif [[ -z "${TERMINALS_}" ]] && [ ${TERMINAL_ID_} -eq -1 ] ; then
    {
      >&2 log ERROR terminal "something went wrong before here, or logic is missing"
      continue
    }
    else
    {
      >&2 log INFO TERMINAL_ID_: "${TERMINAL_ID_}"
      if [[ -n "${_path2}" ]] ; then
      {
        _path="${_path2}"
      }
      fi
      if [[ -n "${_run2}" ]] ; then
      {
        _run="${_run2}"
      }
      fi
      >&2 log INFO _path: "${_path}"
      >&2 log INFO  _run: "${_run}"
      (( DEBUG )) || qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.select_terminal 0
      (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
      (( DEBUG )) || _yakuake_path_and_run
      (( DEBUG )) || LAST_UUID_ID_=$(qdbus org.guake3.RemoteControl /org/guake3/RemoteControl org.guake3.RemoteControl.get_selected_uuidtab)
      # if [[ -n "${_path2}" ]] ; then
      # {
      #   path="${_path2}"
      # }
      # fi
      # if [[ -n "${_run2}" ]] ; then
      # {
      #   _run="${_run2}"
      # }
      # fi
      >&2 log INFO _path: "${_path}"
      >&2 log INFO  _run: "${_run}"
      (( DEBUG )) || _yakuake_split
    }
    fi
    (( _counter ++ ))
    [ ${_counter} -gt ${LIMIT_COUNTER} ] && [ ${LIMIT_COUNTER} -gt 0 ]  && break;
    (( _alt_counter ++ ))
  }
  done <<< "${_sessions}"
} # end load_tabs

# Expect to produce some actions like these. Left for referemce

if [ ${#} -gt 0 ] ; then
{
  if [[ "${1}" == '--debug' ]] ; then
  {
    load_tabs --debug "${2-}"
  }
  else
  {
    load_tabs "${*}"
  }
  fi
}
else
{
  load_tabs
}
fi



