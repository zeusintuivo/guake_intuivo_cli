#!/usr/bin/env bash
#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
# Suggesged to Place under Quick Open  PATTERN: /usr/local/bin/guake_quick_open_file_opener %(file_path)s:%(line_number)s
# MacOS uising ITerm2.app
# iTerm2 > Profiles > Adv -> Semantic History > Run Coprocess:
# /usr/bin/env bash /Users/user.name/_/clis/guake_intuivo_cli/guake_quick_open_file_opener \1:\2 run_coprocess \3 \4 \5
# iTerm2 > Profiles > Adv -> Semantic History > Run Command:
# /usr/bin/env bash /Users/user.name/_/clis/guake_intuivo_cli/guake_quick_open_file_opener \1:\2 run_command \3 \4 \5
# Linux Using Guake
#
# How to show line number when executing bash script REF: https://stackoverflow.com/questions/17804007/how-to-show-line-number-when-executing-bash-script
# set -x
# export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

function open_command() {
    # emulate -L zsh
    # setopt shwordsplit
    local open_cmd
    case "$OSTYPE" in
        (darwin*) open_cmd='open' ;;
        (cygwin*) open_cmd='cygstart' ;;
        (linux*) open_cmd='xdg-open' ;;
        (msys*) open_cmd='start ""' ;;
        (*) echo "Platform $OSTYPE not supported"
            return 1 ;;
    esac
    if [[ "$OSTYPE" = darwin* ]] ; then
        $open_cmd "$@" &> /dev/null
    else
        nohup $open_cmd "$@" &> /dev/null
    fi
 }
function output_question() {
  # emulate -L zsh
  # setopt shwordsplit
  local open_cmd
  # $OSTPYE is a global env Variable normally expected to be found
  case "$OSTYPE" in
    (darwin*) open_cmd='1' ;;
    (cygwin*) open_cmd='1' ;;
    (linux*) open_cmd='1' ;;
    (msys*) open_cmd='1' ;;
    (*) open_cmd='1' ;;
  esac
  if [[ "$open_cmd" = '1' ]] ; then
    echo 1
    return 1
  fi
  echo 0
  return 0
}
function sdin_available(){
# REF: https://scripter.co/nim-check-if-stdin-stdout-are-associated-with-terminal-or-pipe/

# How to detect whether input is from keyboard, a file, or another process.
# Useful for writing a script that can read from standard input, or prompt the
# user for input if there is none.

# https://gist.github.com/davejamesmiller/1966557
if [[ -t 0 ]] # Script is called normally - Terminal input (keyboard) - interactive
then
    # eless foo
    # eless foo | cat -
    # echo "--> Input from terminal"
    echo "terminal"
    return 0
else # Script is getting input from pipe or file - non-interactive
    # echo bar | eless foo
    # echo bar | eless foo | cat -
    # echo "--> Input from PIPE/FILE"
    echo "pipe"
    return 1
fi
} # end stin_available

function sdout_available(){
# https://stackoverflow.com/a/911213/1219634
if [[ -t 1 ]] # Output is going to the terminal
then
    # eless foo
    # echo bar | eless foo
    # echo "    Output to terminal -->"
    echo "terminal"
   return 0
else # Output is going to a pipe, file?
    # eless foo | cat -
    # echo bar | eless foo | cat -
    # echo "    Output to a PIPE -->"
    echo "pipe"
    return 1
fi

} # end stout_available
function guake_available(){
  local -i avaiable=0
  if ( command -v guake >/dev/null 2>&1 ) ; then
  {
    avaiable=1
  }
  fi
  echo ${avaiable}
  return ${avaiable}
}
function xdotool_available(){
  local -i avaiable=0
  if ( command -v xdotool >/dev/null 2>&1 ) ; then
  {
    avaiable=1
  }
  fi
  echo ${avaiable}
  return ${avaiable}
}

GUAKE_AVAILABLE=$(guake_available)
XDOTOOL_AVAILABLE=$(xdotool_available)
SHOWOUTPUT=$(output_question)
function _main(){
  local -i ITERM_RUNCOMMAND=0
  local -i DEBUG=1
  local WORKING_FOLDER=$(pwd)  # in MacOs Iterm defaults to /
  local clicked_extension
  local clicked_name
  local clicked_linenumber
    # How to check if a variable is set in Bash? REF: https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash if [ -z ${var+x} ]; then echo "var is unset"; else echo "var is set to '$var'"; fi
    local -i ITERM=0
    # ((   ITERM )) && [[ -f "${HOME}/.temp_keys" ]] && echo "source \"${HOME}/.temp_keys\""
    # (( ! ITERM )) && [[ -f "${HOME}/.temp_keys" ]] && . "${HOME}/.temp_keys"
    # ((   ITERM )) && [ -f .temp_keys ] && echo "source .temp_keys"
    # (( ! ITERM )) && [ -f .temp_keys ] && . .temp_keys
    if [ -z ${ITERM_PROFILE+x} ]; then ITERM=0; else ITERM=1; fi
    (( ! ITERM )) && if ( env | grep "ITERM"  &>/dev/null  ); then ITERM=1; else ITERM=0; fi
    (( ! ITERM )) && if ( env | grep "__CFBundleIdentifier"  &>/dev/null  ); then ITERM=1; else ITERM=0; fi

    # if [[ "${SHELL}" == *"zsh" ]] ; then
    # {
    #   ((   ITERM )) && [[ -f "${HOME}/.zprofile" ]] && echo "source \"${HOME}/.zprofile\""
    #   (( ! ITERM )) && [[ -f "${HOME}/.zprofile" ]] && . "${HOME}/.zprofile"
    # }
    # fi
    # if [[ "${SHELL}" == *"bash" ]] ; then
    # {
    #   ((   ITERM )) && [[ -f "${HOME}/.bash_profile" ]] && echo "source \"${HOME}/.bash_profile\""
    #   (( ! ITERM )) && [[ -f "${HOME}/.bash_profile" ]] && . "${HOME}/.bash_profile"
    # }
    # fi
    # if [[ "${SHELL}" == *"sh" ]] && [[ "${SHELL}" != *"zsh" ]] && [[ "${SHELL}" == *"bash" ]]; then
    # {
    #   ((   ITERM )) && [[ -f "${HOME}/.profile" ]] && echo "source \"${HOME}/.profile\""
    #   (( ! ITERM )) && [[ -f "${HOME}/.profile" ]] && . "${HOME}/.profile"
    # }
    # fi
    # (( DEBUG )) && echo "echo ITERM_PROFILE:$ITERM_PROFILE"
    # (( DEBUG )) && echo "echo HOME:$HOME"
    # (( DEBUG )) && echo "echo ITERM:$ITERM"
    # (( DEBUG )) && echo "echo EDITOR:$EDITOR"
    # (( DEBUG )) && echo "echo LOADED:$LOADED"
    # (( DEBUG )) && echo "echo which nano:$(which nano)"
    # (( DEBUG )) && echo "echo env:\"$(env)\""

  (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"ITERM: Found\""
  (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "ITERM: not found"
  (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"You cliked: ${*}\""
  (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "You cliked: ${*}"
  (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"Current pwd: $(pwd)\""
  (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "Current pwd: $(pwd)"
  function file_name() {
    #
    # Outputs the file extension given a file name
    #
    # $1 = Filename.ext:linenummer
    #
    # Usage: extension=$(file_name "foo/bar.baz")
    #   Result: $extension ==> "baz"
    #
    #
    local test_value=$(echo "${1%:*}")
    if [[ "${test_value}" == *":xdebug://"* ]] ; then
    {
      EDITOR="pstorm"
      echo "${test_value}" | cut -d":" -f1
    }
    else
    {
      echo "${test_value}"
    }
    fi
  } # end file_name

  function file_extension() {
    #
    # Outputs the file extension given a file name
    #
    # $1 = Filename.ext:linenummer
    #
    # Usage: extension=$(file_extension "foo/bar.baz")
    #   Result: $extension ==> "baz"
    #
    #
    local test_value=$(echo "${1##*.}")
    if [[ "${test_value}" == *":"* ]] ; then
    {
      echo "${test_value}" | cut -d":" -f1
    }
    else
    {
      echo "${test_value}"
    }
    fi
  } # end file_extension

  function line_number() {
    #
    # Outputs the line number given a file name
    #
    # $1 = Filename:linenummer
    #
    # Usage: extension=$(line_number "foo/bar.baz")
    #   Result: $extension ==> "baz"
    #
    #
    local line_number_test_value=$(echo "${1##*.}") # Get everything after the first found dot. assumption that is filename with extenstion .php:123
    if [[ "${line_number_test_value}" == *":"* ]] ; then # expecting expresion "php:234"
    {
      if [[ "${line_number_test_value}" == *" "* ]] ; then  # expecting expression "php:243 run_command /home/user/projects/website1"
      {
        # if debug show more after line line_number:193 run_command
        echo "${line_number_test_value}" | cut -d" " -f1 | cut -d":" -f2
      }
      else # expecting expresion "php:234"
      {
        echo "${line_number_test_value}" | cut -d":" -f2
      }
      fi
    }
    else
    {
      line_number_test_value="${*}"
      if [[ "${line_number_test_value}" == *" "* ]] ; then
      {
        echo "${line_number_test_value}" | cut -d" " -f1  # expecting expression "213 /home/user/projects/website1"
      }
      else
      {
        echo "${line_number_test_value}"  # expecting expression "213"
      }
      fi
    }
    fi
  } # end line_number

  function default_editor() {
    #  args={"vim", "+"..lineno, name}
    # -- args={"nano", "+"..lineno, name}
    # -- args={"pstorm", name..":"..lineno}
    # -- args={"mine", name..":"..lineno}
    # -- args={"webstorm", name..":"..lineno}
    # -- args={"charm", name..":"..lineno}
    # -- args={"subl", name..":"..lineno}
    # -- args={"brackets", name}
    # -- args={"code", "-g", name..":"..lineno}
    # -- args={"code-insiders", "-g", name..":"..lineno}

    (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} clicked_linenumber:$clicked_linenumber"
    (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} clicked_linenumber:$clicked_linenumber
    (( SHOWOUTPUT )) && set +e
    if [  -z ${EDITOR} ] ; then
    {
      (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO}  EDITOR VAR not found in ${SHELL} environment"
      (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO}  EDITOR VAR not found in ${SHELL} environment

        (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"attemping to read ${WORKING_FOLDER}/.temp_keys\""
        (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "attemping to read ${WORKING_FOLDER}/.temp_keys"
        ((   ITERM )) && [[ -f "${WORKING_FOLDER}/.temp_keys" ]] && echo "source \"${WORKING_FOLDER}/.temp_keys\""
        ((   ITERM )) && (( ITERM_RUNCOMMAND )) && [[ -f "${WORKING_FOLDER}/.temp_keys" ]] && source "${WORKING_FOLDER}/.temp_keys"
        (( ! ITERM )) && [[ -f "${WORKING_FOLDER}/.temp_keys" ]] && source "${WORKING_FOLDER}/.temp_keys"
        (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} 'editor:$EDITOR'"
        (( SHOWOUTPUT )) && (( ! ITERM )) && echo "$0${LINENO} 'editor:$EDITOR'"


      if [  -z ${EDITOR} ] ; then
      {
        (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"attemping to read ${HOME}/.temp_keys\""
        (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "attemping to read ${HOME}/.temp_keys"
        ((   ITERM )) && [[ -f "${HOME}/.temp_keys" ]] && echo "source \"${HOME}/.temp_keys\""
        ((   ITERM )) && (( ITERM_RUNCOMMAND )) && [[ -f "${HOME}/.temp_keys" ]] &&  source "${HOME}/.temp_keys"
        (( ! ITERM )) && [[ -f "${HOME}/.temp_keys" ]] && source "${HOME}/.temp_keys"
        (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} 'editor:$EDITOR'"
        (( SHOWOUTPUT )) && (( ! ITERM )) && echo "$0${LINENO} 'editor:$EDITOR'"
      }
      fi
    }
    fi

    if [  -n ${EDITOR} ] ; then
    {
      (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} EDITOR defined:${EDITOR}"
      (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "EDITOR defined:${EDITOR}"
      if ( command -v "${EDITOR}" >/dev/null 2>&1 ) || ([[ "${EDITOR}" == *"emacsnw" ]] && ( command -v emacs >/dev/null 2>&1 ) ); then
      {
        (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} Command  \"${EDITOR}\" found"
        (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} Command  "${EDITOR}" found
        if [[ "${EDITOR}" == *"code-insiders" ]] || \
            [[ "${EDITOR}" == *"code" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 2
          echo "${EDITOR}" -g "${*}"
          ${EDITOR} -g "${*}"
          return 0
        }
        elif [[ "${EDITOR}" == *"nano" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/nano" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/nano" ]] || \
          [[ "${EDITOR}" == *"vim" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/vim" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/vim" ]] || \
          [[ "${EDITOR}" == *"emacs" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/emacs" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/emacs" ]] || \
          [[ "${EDITOR}" == *"emacsnw" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/emacsnw" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/emacsnw" ]] ; then
        {
          [[ "${EDITOR}" == *"emacsnw" ]] && local EDITOR="emacs -nw"
          ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5\""
          ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"line: ${clicked_linenumber}\""
          ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"name: ${clicked_name}\""
          ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR}\""
          ((   GUAKE_AVAILABLE )) &&  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"  GUAKE_AVAILABLE=${GUAKE_AVAILABLE}\""
          (( ! GUAKE_AVAILABLE )) &&  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"! GUAKE_AVAILABLE=${GUAKE_AVAILABLE}\""

          ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} Running 5
          ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "line: ${clicked_linenumber}"&
          ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "name: ${clicked_name}" &
          ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "editor: ${EDITOR}" &
          ((   GUAKE_AVAILABLE )) &&  ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "  GUAKE_AVAILABLE=${GUAKE_AVAILABLE}"
          (( ! GUAKE_AVAILABLE )) &&  ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "! GUAKE_AVAILABLE=${GUAKE_AVAILABLE}"
          local -i _changed=0
          if [[ "${*}" == *"xdebug://"* ]] ; then
          {
            if ( command -v "pstorm" >/dev/null 2>&1 ) ; then
            {
              ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.1\""
              EDITOR="pstorm"
              _changed=1
              ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "editor changed: ${EDITOR}"
            }
            elif ( command -v subl >/dev/null 2>&1 ) ; then
            {
              ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.2\""
              EDITOR="subl"
              _changed=1
              ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "editor changed: ${EDITOR}"
            }
            elif ( command -v code >/dev/null 2>&1 ) ; then
            {
              ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.3\""
              EDITOR="code -g"
              _changed=1
              ((SHOWOUTPUT)) &&  (( ! ITERM )) &&echo "editor changed: ${EDITOR}"
            }
            elif ( command -v code-insiders >/dev/null 2>&1 ) ; then
            {
              ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.4\""
              EDITOR="code-insiders -g"
              _changed=1
              ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "editor changed: ${EDITOR}"
            }
            elif ( command -v gedit >/dev/null 2>&1 ) ; then
            {
              ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.5\""
              EDITOR="gedit"
              _changed=1
              ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "editor changed: ${EDITOR}"
            }
            fi
          }
          fi
          if [[ ${_changed} -eq 1 ]] ; then
          {
            ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.6\""
            ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "5 editor: ${EDITOR} ${clicked_name}:${clicked_linenumber}" &
            ((   GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
            (( XDOTOOL_AVAILABLE )) && (( ! ITERM )) && (( ! ITERM )) &&xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
            ((   GUAKE_AVAILABLE )) && (( ! ITERM )) && guake --hide&
            (( ! GUAKE_AVAILABLE )) && (( ! ITERM )) && open_command "${clicked_name}:${clicked_linenumber}" &
            return 0
          }
          else
          {
            ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.7\""
            ((   GUAKE_AVAILABLE )) && ((SHOWOUTPUT)) && (( ! ITERM )) && echo $0:${LINENO} "5.1 editor: guake -e ${EDITOR} +${clicked_linenumber} ${clicked_name}" &
            ((   GUAKE_AVAILABLE )) && (( ! ITERM )) && guake -e "${EDITOR} +${clicked_linenumber} ${clicked_name}" &
            if (( ! GUAKE_AVAILABLE )) ; then
            {
              if (( ITERM )) ; then
              {
                if (( ITERM_RUNCOMMAND )) ; then # ITerm2.app "Run Command"0
                {
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.8.2\""
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR}\""
                  echo "echo \"${EDITOR} +${clicked_linenumber} \"${clicked_name}\" \"" &
                  echo "echo osascript \"${EDITOR} +${clicked_linenumber} \"${clicked_name}\" \"" &
                  osascript \
-e 'tell application "iTerm" to activate' \
-e 'tell application "System Events" to tell process "iTerm" to keystroke "t" using command down' \
-e 'tell application "System Events" to tell process "iTerm" to keystroke "'${EDITOR} +${clicked_linenumber} ${clicked_name}'"' \
-e 'tell application "System Events" to tell process "iTerm" to key code 52' &
                  # open_command "${clicked_name}:${clicked_linenumber}" &
                  return 0
                }
                else
                {
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.8.1\""
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR}\""
                  echo "echo \"${EDITOR} +${clicked_linenumber} \"${clicked_name}\" \"" &
                  ${EDITOR} +${clicked_linenumber} "${clicked_name}" &
                  # open_command "${clicked_name}:${clicked_linenumber}" &
                  return 0
                }
                fi
              }
              else
              {
                ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 5.9\""
                "${EDITOR}" +"${clicked_linenumber} ${clicked_name}" &
                open_command "${clicked_name}:${clicked_linenumber}" &
                return 0
              }
              fi
            }
            fi
          }
          fi
          return 0
        }
        elif [[ "${EDITOR}" == *"brackets" ]] ; then
        {
          (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 6\""
          (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} Running 6
          ((   GUAKE_AVAILABLE )) && echo guake -e "${EDITOR} ${clicked_name}" &
          ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR}"  "${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) && echo "${EDITOR}  ${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) &&  ${EDITOR}  "${clicked_name}" &
          return 0
        }
        elif [[ "${EDITOR}" == *"komodo" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 6.1
          ((   GUAKE_AVAILABLE )) && echo guake -e ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          ((   GUAKE_AVAILABLE )) && guake -e ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          (( ! GUAKE_AVAILABLE )) && echo  ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          (( ! GUAKE_AVAILABLE )) && ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          return 0
        }
        elif [[ "${EDITOR}" == *"gvim" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 6.2
          ((   GUAKE_AVAILABLE )) && echo guake -e ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          ((   GUAKE_AVAILABLE )) && guake -e ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) && echo ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) && ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          return 0
        }
        elif [[ "${EDITOR}" == *"webstorm" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/webstorm" ]] || \
          [[ "${EDITOR}" == *"charm" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/charm" ]] || \
          [[ "${EDITOR}" == *"pstorm" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/pstorm" ]] || \
          [[ "${EDITOR}" == *"mine" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/mine" ]] || \
          [[ "${EDITOR}" == *"netbeans" ]]  \
          ; then
        {
          (( SHOWOUTPUT )) && echo Running 7
          # (( XDOTOOL_AVAILABLE )) && xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          # "${EDITOR}" "${*}"
#                      ((SHOWOUTPUT)) && echo "7 editor: ${EDITOR} ${clicked_name}:${clicked_linenumber}" &
#                      ((   GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
#                      (( XDOTOOL_AVAILABLE )) && xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
#                      ((   GUAKE_AVAILABLE )) && guake --hide&
#                      (( ! GUAKE_AVAILABLE )) && open_command "${clicked_name}:${clicked_linenumber}" &
#          {
            if (( ! GUAKE_AVAILABLE )) ; then
            {
              if (( ITERM )) ; then
              {
                if (( ITERM_RUNCOMMAND )) ; then # ITerm2.app "Run Command"
                {
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 7.1.1\""
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR} ${clicked_name}:${clicked_linenumber} &\""
                  # echo "echo ${EDITOR} ${clicked_name}:${clicked_linenumber} " &
                  ${EDITOR} ${clicked_name}:${clicked_linenumber} &
                  # echo "echo osascript \"${EDITOR} ${clicked_name}:${clicked_linenumber} \"" &
#                   osascript \
# -e 'tell application "iTerm" to activate' \
# -e 'tell application "System Events" to tell process "iTerm" to keystroke "t" using command down' \
# -e 'tell application "System Events" to tell process "iTerm" to keystroke "'${EDITOR} ${clicked_name}:${clicked_linenumber}'"' \
# -e 'tell application "System Events" to tell process "iTerm" to key code 52' &
                  # open_command "${clicked_name}:${clicked_linenumber}" &
                  return 0
                }
                else         # ITerm2.app "Run Coprocess" ..where everything that echoe is executed, like if you type it
                {
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"Running 7.1.2\""
                  ((SHOWOUTPUT)) && ((   ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR}\""
                  echo "echo \"${EDITOR}\" \"${clicked_name}:${clicked_linenumber}\" " &
                  "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
                  # open_command "${clicked_name}:${clicked_linenumber}" &
                  return 0
                }
                fi
              }
              else # iterm
              {
                  ((SHOWOUTPUT)) && (( ! ITERM )) && echo "echo $0:${LINENO} \"Running 7.1.3\""
                  ((SHOWOUTPUT)) && (( ! ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR}\""
                (( ! GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
                (( ! GUAKE_AVAILABLE )) && open_command "${clicked_name}:${clicked_linenumber}" &
              }
              fi
            }
            else  # guake_available
            {
                  ((SHOWOUTPUT)) && (( ! ITERM )) && echo "echo $0:${LINENO} \"Running 7.1.4\""
                  ((SHOWOUTPUT)) && (( ! ITERM )) && echo "echo $0:${LINENO} \"editor: ${EDITOR}\""
              ((   GUAKE_AVAILABLE )) && ((SHOWOUTPUT)) && echo "7.1.5 editor: guake -e ${EDITOR} ${clicked_name}:${clicked_linenumber}" &
              ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR} ${clicked_name}:${clicked_linenumber}" &
              (( XDOTOOL_AVAILABLE )) && (( SHOWOUTPUT )) && echo xdotool search --name ${EDITOR}  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              (( XDOTOOL_AVAILABLE )) && xdotool search --name ${EDITOR}  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              ((   GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo guake --hide&
              ((   GUAKE_AVAILABLE )) && guake --hide&
            }
            fi
          return 0
        }
        else
        {
          (( SHOWOUTPUT )) && echo NO EDITOR in list of guake_quick_open_file_opener here attemping anyways
          (( SHOWOUTPUT )) && echo Running 77
          ((   GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo guake -e "${EDITOR} ${clicked_name}:${clicked_linenumber}"&
          ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR} ${clicked_name}:${clicked_linenumber}"&
          (( ! GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo "${EDITOR}" "${clicked_name}:${clicked_linenumber}"&
          (( ! GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}"&
          (( XDOTOOL_AVAILABLE )) && (( SHOWOUTPUT )) && echo xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          (( XDOTOOL_AVAILABLE )) && xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          ( command -v guake >/dev/null 2>&1 ) &&  guake --hide&
          # ${EDITOR} "${*}"
          return 0
        }
        fi
      }
      else
      {
        (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} EDITOR "${EDITOR}" not responding to 'command -v' command
      }
      fi
    }
    else  # EDITOR VAR not found in bash environment
    {
      (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO}  EDITOR VAR not found in ${SHELL} environment"
      (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO}  EDITOR VAR not found in ${SHELL} environment
      if [[ "${*}" == *".rb"* ]] || [[ "${*}" == *"smart-workspace-backend"* ]] ; then
      {
        # echo mine  "${*}"
        ((   ITERM )) && echo code -g  \""${*}"\"
        (( ! ITERM )) && code -g  \""${*}"\"
        (( ! ITERM )) && guake --hide&
      }
      else
      {
        if [[ "${EDITOR2}" == *"pstorm" ]] ; then
        {
          # echo /usr/local/bin/nano +${clicked_linenumber} ${clicked_name}
          if [ -z ${clicked_linenumber} ] ; then
          {
            echo ${EDITOR2}  "${clicked_name}" &
          }
          else
          {
            # NEW echo ${EDITOR2}  --line ${clicked_linenumber}  "${clicked_name}" &
            echo ${EDITOR2}  "${clicked_name}:${clicked_linenumber}" &
          }
          fi
        }
        fi
        echo subl -g "${clicked_name}:${clicked_linenumber}" &
        if [[ "${EDITOR}" == *"nano" ]] ; then
        {
          # echo /usr/local/bin/nano +${clicked_linenumber} ${clicked_name}
          echo ${EDITOR} +${clicked_linenumber} ${clicked_name} &
        }
        fi

        ( command -v guake >/dev/null 2>&1 )&& (( ! ITERM ))  && guake --hide&
      }
      fi
      exit 0
      if ( command -v subl >/dev/null 2>&1 ); then
      {
        (( SHOWOUTPUT )) && echo Running 10
        echo "${EDITOR}"  "${*}"
        subl  "${*}"
        return 0
      }
      elif ( command -v code >/dev/null 2>&1 ); then
      {
        (( SHOWOUTPUT )) && echo Running 9
        echo "${EDITOR}" -g "${*}"
        code -g "${*}"
        return 0
      }
      elif ( command -v code-insiders >/dev/null 2>&1 ); then
      {
        (( SHOWOUTPUT )) && echo Running 11
        echo "${EDITOR}" -g  "${*}"
        code-insiders -g  "${*}"
        return 0
      }
      else
      {
        (( SHOWOUTPUT )) && echo Attempting to run default "open" command for this system
        (( SHOWOUTPUT )) && echo Running 17
        open_command "${*}"
      }
      fi
    }
    fi
  } # end default_editor


  function try_to_guess_editor_from_project_dirs() {
    # If inside a JetBrains Folder is located, Assumption that you have installed it
    if  (# jetbrains
        [ -d ./.idea/ ] ||
        [ -d .idea/ ] ||
        [ -d ../.idea/ ] ||
        [ -d ../../.idea/ ] ||
        [ -d ../../../.idea/ ] ||
        [ -d ../../../../.idea/ ] ||
        [ -d ../../../../../.idea/ ] ||
        [ -d ../../../../../../.idea/ ]
        ); then
    {
        if (# rails
              [ -f ./Gemfile.lock ] ||
              [ -f Gemfile.lock ] ||
              [ -f ../Gemfile.lock ] ||
              [ -f ../../Gemfile.lock ] ||
              [ -f ../../../Gemfile.lock ] ||
              [ -f ../../../../Gemfile.lock ] ||
              [ -f ../../../../../Gemfile.lock ] ||
              [ -f ../../../../../../Gemfile.lock ]
            ) ||
            (
              [[ "${clicked_extension}" == "rb" ]]
            ); then
            {
              (( SHOWOUTPUT )) && echo Running 12
              (( SHOWOUTPUT )) && echo mine "${*}"
              mine "${*}"
            }
        elif
            (# laravel
                [ -f ./composer.lock ] ||
                [ -f composer.lock ] ||
                [ -f ../composer.lock ] ||
                [ -f ../../composer.lock ] ||
                [ -f ../../../composer.lock ] ||
                [ -f ../../../../composer.lock ] ||
                [ -f ../../../../../composer.lock ] ||
                [ -f ../../../../../../composer.lock ]
            ) ||
            (# wordpress
                [ -f ./wp-config.php ] ||
                [ -f wp-config.php ] ||
                [ -f ../wp-config.php ] ||
                [ -f ../../wp-config.php ] ||
                [ -f ../../../wp-config.php ] ||
                [ -f ../../../../wp-config.php ] ||
                [ -f ../../../../../wp-config.php ] ||
                [ -f ../../../../../../wp-config.php ]
            ) ||
            (# the valet folder project $HOME/.valet or $HOME/.config/.valet
                # bin  cli  composer.json  develop  LICENSE.txt  readme.md  SECURITY.md  server.php  valet
                # bin  cli  composer.json  composer.lock  develop  LICENSE.txt  readme.md  SECURITY.md  server.php  valet  vendor
                [ -d ./bin ] && [ -d ./cli ] && [ -f ./composer.json ] && [ -f ./develop ] && [ -f ./LICENSE.txt ] && [ -f ./readme.md ] && [ -f ./SECURITY.md ] && [ -f ./server.php ] && [ -f ./valet ]
            ) ||
            (# just composer project
                   ([ -f ./composer.json ] && [ -f ./composer.lock ] && [ -d ./vendor ])   || \
                   ([ -f ../composer.json ] && [ -f ../composer.lock ] && [ -d ../vendor ]) || \
                   ([ -f ../../composer.json ] && [ -f ../../composer.lock ] && [ -d ../../vendor ]) || \
                   ([ -f ../../../composer.json ] && [ -f ../../../composer.lock ] && [ -d ../../../vendor ])
            ) ||
            (
                [[ "${clicked_extension}" == "php" ]]
            ) ; then
            {
              (( SHOWOUTPUT )) && echo Running 13
              (( SHOWOUTPUT )) && echo pstorm "${*}"
              pstorm "${*}"
            }
        elif
            (# cds by SAP
             # apis  bin  CHANGELOG.md  common.cds  developer-license-3.1.txt  etc  _i18n  lib  package.json  package-lock.json  README.md  server.js  SIGNATURE.SMF
                ([ -f ./package.json ] && [ -f ./SIGNATURE.SMF ] && [ -d ./apis  ])
            ) ||
            (
                [[ "${clicked_extension}" == "js" ]]
            ) ; then
            {
              (( SHOWOUTPUT )) && echo Running 14
              (( SHOWOUTPUT )) && echo webstorm "${*}"
              webstorm "${*}"
            }
        elif
            (# typescript REACT
            # cloudbuild.yaml        cypress       global.d.ts                        jest.config.js  OWNERS             packages   terraform             tsconfig.json
            # commit_exception.list  cypress.json  Jenkinsfile-Editor-CleanUp-GCloud  lerna.json      package.json       README.md  test                  unstage_exception_list
            # cors-bucket-config.js  e2e           Jenkinsfile-Editor-E2E-Test        node_modules    package-lock.json  scripts    tsconfig.eslint.json  yarn.lock
                ([ -f ./package.json ] && [ -f ./tsconfig.json ]  && [ -f ./tsconfig.json ] && [ -d ./cypress  ])
           ) ||
            (
                [[ "${clicked_extension}" == "tsx" ]]
            ) ; then
            {
              (( SHOWOUTPUT )) && echo Running 15 .1
              (( SHOWOUTPUT )) && echo webstorm "${*}"
              (( XDOTOOL_AVAILABLE )) && (( SHOWOUTPUT )) && echo xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              (( XDOTOOL_AVAILABLE )) && xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              webstorm "${*}"
              (( XDOTOOL_AVAILABLE )) && xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              # (( SHOWOUTPUT )) && echo Running 15 .2
              # echo code-insiders -g "${*}"
              # code-insiders -g "${*}"
            }
        elif
            (# guake
             # AUTHORS    COPYING  env        guake        Makefile     NEWS.rst  Pipfile.lock  pyproject.toml  releasenotes          requirements.txt  setup.cfg
             # ChangeLog  docs     git-hooks  MAINTAINERS  MANIFEST.in  Pipfile   po            README.rst      requirements-dev.txt  scripts           setup.py
                ([ -f ./setup.py ] && [ -f ./Pipfile ] && [ -d ./guake  ])
           ) ||
            (
                [[ "${clicked_extension}" == "py" ]]
            )
        then
            {
              (( SHOWOUTPUT )) && echo Running 16
              (( SHOWOUTPUT )) && echo charm "${*}"
              charm "${*}"
            }
        # elif
        #     (
        #         [[ "${clicked_extension}" == "sh" ]]
        #     )
        # then
        #     {
        #       (( SHOWOUTPUT )) && echo Going default 1
        #       default_editor "${*}"
        #     }
        # else  # any pattern above or combination fails, --> default to code
        #     {
        #       (( SHOWOUTPUT )) && echo Going default 2
        #       default_editor "${*}"
        #     }
        fi
    }
    # else # not .idea folder then going defaut editor logic
    # {
    #   (( SHOWOUTPUT )) && echo Going default 3
    #   default_editor "${*}"
    # }
    fi
  } # end try_to_guess_editor_from_project_dirs

  (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"file_name:$(file_name "${*}")\""
  (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "file_name:$(file_name "${*}")"
  clicked_name=$(file_name "${*}")
  (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"file_extension:$(file_extension "${*}")\""
  (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "file_extension:$(file_extension "${*}")"
  clicked_extension=$(file_extension "${*}")
  if [[ "${clicked_extension}" == "${clicked_name}" ]] ; then
  {
    clicked_extension=""
  }
  fi
  (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} clicked_extension:$clicked_extension"
  (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} clicked_extension:$clicked_extension
  local test_line_number=$(echo "${*}" | cut -d":" -f2)
  (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"test_line_number test:${test_line_number}\""

  clicked_linenumber=$(line_number "${test_line_number}")
  (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"line_number found:${clicked_linenumber}\""
  (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "line_number found:${clicked_linenumber}"

  if [[ "${*}" == *" run_command"* ]] ; then
  {
    ITERM_RUNCOMMAND=1
  }
  fi
  (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"ITERM_RUNCOMMAND:${ITERM_RUNCOMMAND}\""
  (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "ITERM_RUNCOMMAND:${ITERM_RUNCOMMAND}"

  local test_working=$(echo "${*}" | cut -d" " -f3)
  if [ -n ${test_working} ] ; then
  {
    WORKING_FOLDER="${test_working}"
  }
  fi
  (( DEBUG )) && (( SHOWOUTPUT )) && ((   ITERM )) && echo "echo $0:${LINENO} \"WORKING_FOLDER:${WORKING_FOLDER}\""
  (( DEBUG )) && (( SHOWOUTPUT )) && (( ! ITERM )) && echo $0:${LINENO} "WORKING_FOLDER:${WORKING_FOLDER}"

  default_editor "${*}"
} # end _main

_main "${*}"
