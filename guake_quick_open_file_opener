#!/usr/bin/env bash
#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
# Suggesged to Place under Quick Open  PATTERN: /usr/local/bin/guake_quick_open_file_opener %(file_path)s:%(line_number)s

function open_command() {
    # emulate -L zsh
    # setopt shwordsplit
    local open_cmd
    case "$OSTYPE" in
        (darwin*) open_cmd='open' ;;
        (cygwin*) open_cmd='cygstart' ;;
        (linux*) open_cmd='xdg-open' ;;
        (msys*) open_cmd='start ""' ;;
        (*) echo "Platform $OSTYPE not supported"
            return 1 ;;
    esac
    if [[ "$OSTYPE" = darwin* ]] ; then
        $open_cmd "$@" &> /dev/null
    else
        nohup $open_cmd "$@" &> /dev/null
    fi
 }
function output_question() {
  # emulate -L zsh
  # setopt shwordsplit
  local open_cmd
  # $OSTPYE is a global env Variable normally expected to be found
  case "$OSTYPE" in
    (darwin*) open_cmd='0' ;;
    (cygwin*) open_cmd='1' ;;
    (linux*) open_cmd='1' ;;
    (msys*) open_cmd='1' ;;
    (*) open_cmd='1' ;;
  esac
  if [[ "$open_cmd" = '1' ]] ; then
    echo 1
    return 1
  fi
  echo 0
  return 0
}
function sdin_available(){
# REF: https://scripter.co/nim-check-if-stdin-stdout-are-associated-with-terminal-or-pipe/

# How to detect whether input is from keyboard, a file, or another process.
# Useful for writing a script that can read from standard input, or prompt the
# user for input if there is none.

# https://gist.github.com/davejamesmiller/1966557
if [[ -t 0 ]] # Script is called normally - Terminal input (keyboard) - interactive
then
    # eless foo
    # eless foo | cat -
    # echo "--> Input from terminal"
    echo "terminal"
    return 0
else # Script is getting input from pipe or file - non-interactive
    # echo bar | eless foo
    # echo bar | eless foo | cat -
    # echo "--> Input from PIPE/FILE"
    echo "pipe"
    return 1
fi
} # end stin_available

function sdout_available(){
# https://stackoverflow.com/a/911213/1219634
if [[ -t 1 ]] # Output is going to the terminal
then
    # eless foo
    # echo bar | eless foo
    # echo "    Output to terminal -->"
    echo "terminal"
   return 0
else # Output is going to a pipe, file?
    # eless foo | cat -
    # echo bar | eless foo | cat -
    # echo "    Output to a PIPE -->"
    echo "pipe"
    return 1
fi

} # end stout_available
function guake_available(){
  local -i avaiable=0
  if ( command -v guake >/dev/null 2>&1 ) ; then
  {
    avaiable=1
  }
  fi
  echo ${avaiable}
  return ${avaiable}
}
function xdotool_available(){
  local -i avaiable=0
  if ( command -v xdotool >/dev/null 2>&1 ) ; then
  {
    avaiable=1
  }
  fi
  echo ${avaiable}
  return ${avaiable}
}

GUAKE_AVAILABLE=$(guake_available)
XDOTOOL_AVAILABLE=$(xdotool_available)
SHOWOUTPUT=$(output_question)
function _main(){
  local DEBUG=1
  local clicked_extension
  local clicked_name
  local clicked_linenumber
  (( SHOWOUTPUT )) && echo "You cliked: ${*}"
  (( SHOWOUTPUT )) && echo "Current pwd: $(pwd)"
  function file_name() {
    #
    # Outputs the file extension given a file name
    #
    # $1 = Filename.ext:linenummer
    #
    # Usage: extension=$(file_name "foo/bar.baz")
    #   Result: $extension ==> "baz"
    #
    #
    local test_value=$(echo "${1%:*}")
    if [[ "${test_value}" == *":xdebug://"* ]] ; then
    {
      EDITOR="pstorm"
      echo "${test_value}" | cut -d":" -f1
    }
    else
    {
      echo "${test_value}"
    }
    fi
  } # end file_name

  function file_extension() {
    #
    # Outputs the file extension given a file name
    #
    # $1 = Filename.ext:linenummer
    #
    # Usage: extension=$(file_extension "foo/bar.baz")
    #   Result: $extension ==> "baz"
    #
    #
    local test_value=$(echo "${1##*.}")
    if [[ "${test_value}" == *":"* ]] ; then
    {
      echo "${test_value}" | cut -d":" -f1
    }
    else
    {
      echo "${test_value}"
    }
    fi
  } # end file_extension

  function line_number() {
    #
    # Outputs the line number given a file name
    #
    # $1 = Filename:linenummer
    #
    # Usage: extension=$(line_number "foo/bar.baz")
    #   Result: $extension ==> "baz"
    #
    #
    local test_value=$(echo "${1##*.}")
    if [[ "${test_value}" == *":"* ]] ; then
    {
      echo "${test_value}" | cut -d":" -f2
    }
    else
    {
      echo "${test_value}"
    }
    fi
  } # end line_number

  function default_editor() {
    #  args={"vim", "+"..lineno, name}
    # -- args={"nano", "+"..lineno, name}
    # -- args={"pstorm", name..":"..lineno}
    # -- args={"mine", name..":"..lineno}
    # -- args={"webstorm", name..":"..lineno}
    # -- args={"charm", name..":"..lineno}
    # -- args={"subl", name..":"..lineno}
    # -- args={"brackets", name}
    # -- args={"code", "-g", name..":"..lineno}
    # -- args={"code-insiders", "-g", name..":"..lineno}
    (( SHOWOUTPUT )) && echo clicked_linenumber:$clicked_linenumber
    (( SHOWOUTPUT )) && set +e
    [ -f .temp_keys ] && . .temp_keys
    if [[  -n "${EDITOR}" ]] ; then
    {
      (( SHOWOUTPUT )) && echo EDITOR defined
      if ( command -v "${EDITOR}" >/dev/null 2>&1 ) || ([[ "${EDITOR}" == *"emacsnw" ]] && ( command -v emacs >/dev/null 2>&1 ) ); then
      {
        (( SHOWOUTPUT )) && echo Command  "${EDITOR}" found
        if [[ "${EDITOR}" == *"code-insiders" ]] || \
            [[ "${EDITOR}" == *"code" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 2
          echo "${EDITOR}" -g "${*}"
          ${EDITOR} -g "${*}"
          return 0
        }
        elif [[ "${EDITOR}" == *"nano" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/nano" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/nano" ]] || \
          [[ "${EDITOR}" == *"vim" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/vim" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/vim" ]] || \
          [[ "${EDITOR}" == *"emacs" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/emacs" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/emacs" ]] || \
          [[ "${EDITOR}" == *"emacsnw" ]] || \
          [[ "${EDITOR}" == *"/usr/bin/emacsnw" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/emacsnw" ]] ; then
        { [[ "${EDITOR}" == *"emacsnw" ]] && local EDITOR="emacs -nw"
          ((SHOWOUTPUT)) && echo Running 5
          ((SHOWOUTPUT)) && echo "line: ${clicked_linenumber}"&
          ((SHOWOUTPUT)) && echo "name: ${clicked_name}" &
          ((SHOWOUTPUT)) && echo "editor: ${EDITOR}" &
          ((   GUAKE_AVAILABLE )) &&  ((SHOWOUTPUT)) && echo "  GUAKE_AVAILABLE=${GUAKE_AVAILABLE}"
          (( ! GUAKE_AVAILABLE )) &&  ((SHOWOUTPUT)) && echo "! GUAKE_AVAILABLE=${GUAKE_AVAILABLE}"
          local -i _changed=0
          if [[ "${*}" == *"xdebug://"* ]] ; then
          {
            if ( command -v "pstorm" >/dev/null 2>&1 ) ; then
            {
              EDITOR="pstorm"
              _changed=1
              ((SHOWOUTPUT)) && echo "editor changed: ${EDITOR}"
            }
            elif ( command -v subl >/dev/null 2>&1 ) ; then
            {
              EDITOR="subl"
              _changed=1
              ((SHOWOUTPUT)) && echo "editor changed: ${EDITOR}"
            }
            elif ( command -v code >/dev/null 2>&1 ) ; then
            {
              EDITOR="code -g"
              _changed=1
              ((SHOWOUTPUT)) && echo "editor changed: ${EDITOR}"
            }
            elif ( command -v code-insiders >/dev/null 2>&1 ) ; then
            {
              EDITOR="code-insiders -g"
              _changed=1
              ((SHOWOUTPUT)) && echo "editor changed: ${EDITOR}"
            }
            elif ( command -v gedit >/dev/null 2>&1 ) ; then
            {
              EDITOR="gedit"
              _changed=1
              ((SHOWOUTPUT)) && echo "editor changed: ${EDITOR}"
            }
            fi
          }
          fi
          if [[ ${_changed} -eq 1 ]] ; then
          {
            ((SHOWOUTPUT)) && echo "5 editor: ${EDITOR} ${clicked_name}:${clicked_linenumber}" &
            ((   GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
            (( XDOTOOL_AVAILABLE )) && xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
            ((   GUAKE_AVAILABLE )) && guake --hide&
            (( ! GUAKE_AVAILABLE )) && open_command "${clicked_name}:${clicked_linenumber}" &
          }
          else
          {
            ((   GUAKE_AVAILABLE )) && ((SHOWOUTPUT)) && echo "5.1 editor: guake -e ${EDITOR} +${clicked_linenumber} ${clicked_name}" &
            ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR} +${clicked_linenumber} ${clicked_name}" &
            (( ! GUAKE_AVAILABLE )) && "${EDITOR}" +"${clicked_linenumber} ${clicked_name}" &
            (( ! GUAKE_AVAILABLE )) && open_command "${clicked_name}:${clicked_linenumber}" &
          }
          fi
          return 0
        }
        elif [[ "${EDITOR}" == *"brackets" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 6
          ((   GUAKE_AVAILABLE )) && echo guake -e "${EDITOR} ${clicked_name}" &
          ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR}"  "${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) && echo "${EDITOR}  ${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) &&  ${EDITOR}  "${clicked_name}" &
          return 0
        }
        elif [[ "${EDITOR}" == *"komodo" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 6.1
          ((   GUAKE_AVAILABLE )) && echo guake -e ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          ((   GUAKE_AVAILABLE )) && guake -e ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          (( ! GUAKE_AVAILABLE )) && echo  ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          (( ! GUAKE_AVAILABLE )) && ${EDITOR} "${clicked_name}" -l "${clicked_linenumber}" &
          return 0
        }
        elif [[ "${EDITOR}" == *"gvim" ]] ; then
        {
          (( SHOWOUTPUT )) && echo Running 6.2
          ((   GUAKE_AVAILABLE )) && echo guake -e ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          ((   GUAKE_AVAILABLE )) && guake -e ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) && echo ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          (( ! GUAKE_AVAILABLE )) && ${EDITOR} --remote-tab +"${clicked_linenumber}" "${clicked_name}" &
          return 0
        }
        elif [[ "${EDITOR}" == *"webstorm" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/webstorm" ]] || \
          [[ "${EDITOR}" == *"charm" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/charm" ]] || \
          [[ "${EDITOR}" == *"pstorm" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/pstorm" ]] || \
          [[ "${EDITOR}" == *"mine" ]] || \
          [[ "${EDITOR}" == *"/usr/local/bin/mine" ]] || \
          [[ "${EDITOR}" == *"netbeans" ]]  \
          ; then
        {
          (( SHOWOUTPUT )) && echo Running 7
          # (( XDOTOOL_AVAILABLE )) && xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          # "${EDITOR}" "${*}"
#                      ((SHOWOUTPUT)) && echo "7 editor: ${EDITOR} ${clicked_name}:${clicked_linenumber}" &
#                      ((   GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
#                      (( XDOTOOL_AVAILABLE )) && xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
#                      ((   GUAKE_AVAILABLE )) && guake --hide&
#                      (( ! GUAKE_AVAILABLE )) && open_command "${clicked_name}:${clicked_linenumber}" &
#          {
            ((   GUAKE_AVAILABLE )) && ((SHOWOUTPUT)) && echo "7.1 editor: guake -e ${EDITOR} ${clicked_name}:${clicked_linenumber}" &
            ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR} ${clicked_name}:${clicked_linenumber}" &
            (( ! GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_name}:${clicked_linenumber}" &
            (( ! GUAKE_AVAILABLE )) && open_command "${clicked_name}:${clicked_linenumber}" &
#          }

#          ((   GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo "guake -e ${EDITOR} ${clicked_linenumber}:${clicked_name}"&
#          ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR} ${clicked_linenumber}:${clicked_name}" &
#          (( ! GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo  ${EDITOR} "${clicked_linenumber}:${clicked_name}"&
#          (( ! GUAKE_AVAILABLE )) && ${EDITOR} "${clicked_linenumber}:${clicked_name}" &
          (( XDOTOOL_AVAILABLE )) && (( SHOWOUTPUT )) && echo xdotool search --name ${EDITOR}  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          (( XDOTOOL_AVAILABLE )) && xdotool search --name ${EDITOR}  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          ((   GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo guake --hide&
          ((   GUAKE_AVAILABLE )) && guake --hide&
          return 0
        }
        else
        {
          (( SHOWOUTPUT )) && echo NO EDITOR in list of guake_quick_open_file_opener here attemping anyways
          (( SHOWOUTPUT )) && echo Running 77
          ((   GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo guake -e "${EDITOR} ${clicked_linenumber}:${clicked_name}"&
          ((   GUAKE_AVAILABLE )) && guake -e "${EDITOR} ${clicked_linenumber}:${clicked_name}"&
          (( ! GUAKE_AVAILABLE )) && (( SHOWOUTPUT )) && echo "${EDITOR}" "${clicked_linenumber}:${clicked_name}"&
          (( ! GUAKE_AVAILABLE )) && "${EDITOR}" "${clicked_linenumber}:${clicked_name}"&
          (( XDOTOOL_AVAILABLE )) && (( SHOWOUTPUT )) && echo xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          (( XDOTOOL_AVAILABLE )) && xdotool search --name "${EDITOR}"  windowactivate&  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
          guake --hide&
          # ${EDITOR} "${*}"
          return 0
        }
        fi
      }
      else
      {
        (( SHOWOUTPUT )) && echo EDITOR "${EDITOR}" not responding to 'command -v' command
      }
      fi
    }
    else  # EDITOR VAR not found
    {
      (( SHOWOUTPUT )) && echo  EDITOR VAR not found
      if [[ "${*}" == *".rb"* ]] || [[ "${*}" == *"smart-workspace-backend"* ]] ; then
      {
        # echo mine  "${*}"
        echo code -g  \""${*}"\"
        guake --hide&
      } else {
        echo subl  -g "${*}"
        guake --hide&
      }
      fi
      exit 0
      if ( command -v subl >/dev/null 2>&1 ); then
      {
        (( SHOWOUTPUT )) && echo Running 10
        echo "${EDITOR}"  "${*}"
        subl  "${*}"
        return 0
      }
      elif ( command -v code >/dev/null 2>&1 ); then
      {
        (( SHOWOUTPUT )) && echo Running 9
        echo "${EDITOR}" -g "${*}"
        code -g "${*}"
        return 0
      }
      elif ( command -v code-insiders >/dev/null 2>&1 ); then
      {
        (( SHOWOUTPUT )) && echo Running 11
        echo "${EDITOR}" -g  "${*}"
        code-insiders -g  "${*}"
        return 0
      }
      else
      {
        (( SHOWOUTPUT )) && echo Attempting to run default "open" command for this system
        (( SHOWOUTPUT )) && echo Running 17
        open_command "${*}"
      }
      fi
    }
    fi
  } # end default_editor

  (( DEBUG )) && (( SHOWOUTPUT )) && echo "file_name:$(file_name "${*}")"
  clicked_name=$(file_name "${*}")
  (( DEBUG )) && (( SHOWOUTPUT )) && echo "file_extension:$(file_extension "${*}")"
  clicked_extension=$(file_extension "${*}")
  if [[ "${clicked_extension}" == "${clicked_name}" ]] ; then
  {
    clicked_extension=""
  }
  fi
  (( SHOWOUTPUT )) && echo clicked_extension:$clicked_extension
  (( DEBUG )) && (( SHOWOUTPUT )) && echo "line_number:$(line_number "${*}")"
  clicked_linenumber=$(line_number "${*}")
  # (( DEBUG )) && exit 0

  function try_to_guess_editor_from_project_dirs() {
    # If inside a JetBrains Folder is located, Assumption that you have installed it
    if  (# jetbrains
        [ -d ./.idea/ ] ||
        [ -d .idea/ ] ||
        [ -d ../.idea/ ] ||
        [ -d ../../.idea/ ] ||
        [ -d ../../../.idea/ ] ||
        [ -d ../../../../.idea/ ] ||
        [ -d ../../../../../.idea/ ] ||
        [ -d ../../../../../../.idea/ ]
        ); then
    {
        if (# rails
              [ -f ./Gemfile.lock ] ||
              [ -f Gemfile.lock ] ||
              [ -f ../Gemfile.lock ] ||
              [ -f ../../Gemfile.lock ] ||
              [ -f ../../../Gemfile.lock ] ||
              [ -f ../../../../Gemfile.lock ] ||
              [ -f ../../../../../Gemfile.lock ] ||
              [ -f ../../../../../../Gemfile.lock ]
            ) ||
            (
              [[ "${clicked_extension}" == "rb" ]]
            ); then
            {
              (( SHOWOUTPUT )) && echo Running 12
              (( SHOWOUTPUT )) && echo mine "${*}"
              mine "${*}"
            }
        elif
            (# laravel
                [ -f ./composer.lock ] ||
                [ -f composer.lock ] ||
                [ -f ../composer.lock ] ||
                [ -f ../../composer.lock ] ||
                [ -f ../../../composer.lock ] ||
                [ -f ../../../../composer.lock ] ||
                [ -f ../../../../../composer.lock ] ||
                [ -f ../../../../../../composer.lock ]
            ) ||
            (# wordpress
                [ -f ./wp-config.php ] ||
                [ -f wp-config.php ] ||
                [ -f ../wp-config.php ] ||
                [ -f ../../wp-config.php ] ||
                [ -f ../../../wp-config.php ] ||
                [ -f ../../../../wp-config.php ] ||
                [ -f ../../../../../wp-config.php ] ||
                [ -f ../../../../../../wp-config.php ]
            ) ||
            (# the valet folder project $HOME/.valet or $HOME/.config/.valet
                # bin  cli  composer.json  develop  LICENSE.txt  readme.md  SECURITY.md  server.php  valet
                # bin  cli  composer.json  composer.lock  develop  LICENSE.txt  readme.md  SECURITY.md  server.php  valet  vendor
                [ -d ./bin ] && [ -d ./cli ] && [ -f ./composer.json ] && [ -f ./develop ] && [ -f ./LICENSE.txt ] && [ -f ./readme.md ] && [ -f ./SECURITY.md ] && [ -f ./server.php ] && [ -f ./valet ]
            ) ||
            (# just composer project
                   ([ -f ./composer.json ] && [ -f ./composer.lock ] && [ -d ./vendor ])   || \
                   ([ -f ../composer.json ] && [ -f ../composer.lock ] && [ -d ../vendor ]) || \
                   ([ -f ../../composer.json ] && [ -f ../../composer.lock ] && [ -d ../../vendor ]) || \
                   ([ -f ../../../composer.json ] && [ -f ../../../composer.lock ] && [ -d ../../../vendor ])
            ) ||
            (
                [[ "${clicked_extension}" == "php" ]]
            ) ; then
            {
              (( SHOWOUTPUT )) && echo Running 13
              (( SHOWOUTPUT )) && echo pstorm "${*}"
              pstorm "${*}"
            }
        elif
            (# cds by SAP
             # apis  bin  CHANGELOG.md  common.cds  developer-license-3.1.txt  etc  _i18n  lib  package.json  package-lock.json  README.md  server.js  SIGNATURE.SMF
                ([ -f ./package.json ] && [ -f ./SIGNATURE.SMF ] && [ -d ./apis  ])
            ) ||
            (
                [[ "${clicked_extension}" == "js" ]]
            ) ; then
            {
              (( SHOWOUTPUT )) && echo Running 14
              (( SHOWOUTPUT )) && echo webstorm "${*}"
              webstorm "${*}"
            }
        elif
            (# typescript REACT
            # cloudbuild.yaml        cypress       global.d.ts                        jest.config.js  OWNERS             packages   terraform             tsconfig.json
            # commit_exception.list  cypress.json  Jenkinsfile-Editor-CleanUp-GCloud  lerna.json      package.json       README.md  test                  unstage_exception_list
            # cors-bucket-config.js  e2e           Jenkinsfile-Editor-E2E-Test        node_modules    package-lock.json  scripts    tsconfig.eslint.json  yarn.lock
                ([ -f ./package.json ] && [ -f ./tsconfig.json ]  && [ -f ./tsconfig.json ] && [ -d ./cypress  ])
           ) ||
            (
                [[ "${clicked_extension}" == "tsx" ]]
            ) ; then
            {
              (( SHOWOUTPUT )) && echo Running 15 .1
              (( SHOWOUTPUT )) && echo webstorm "${*}"
              (( XDOTOOL_AVAILABLE )) && (( SHOWOUTPUT )) && echo xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              (( XDOTOOL_AVAILABLE )) && xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              webstorm "${*}"
              (( XDOTOOL_AVAILABLE )) && xdotool search --name website windowactivate  # Force Webstorm to Front Gnome - sudo dnf/apt install xdotool
              # (( SHOWOUTPUT )) && echo Running 15 .2
              # echo code-insiders -g "${*}"
              # code-insiders -g "${*}"
            }
        elif
            (# guake
             # AUTHORS    COPYING  env        guake        Makefile     NEWS.rst  Pipfile.lock  pyproject.toml  releasenotes          requirements.txt  setup.cfg
             # ChangeLog  docs     git-hooks  MAINTAINERS  MANIFEST.in  Pipfile   po            README.rst      requirements-dev.txt  scripts           setup.py
                ([ -f ./setup.py ] && [ -f ./Pipfile ] && [ -d ./guake  ])
           ) ||
            (
                [[ "${clicked_extension}" == "py" ]]
            )
        then
            {
              (( SHOWOUTPUT )) && echo Running 16
              (( SHOWOUTPUT )) && echo charm "${*}"
              charm "${*}"
            }
        # elif
        #     (
        #         [[ "${clicked_extension}" == "sh" ]]
        #     )
        # then
        #     {
        #       (( SHOWOUTPUT )) && echo Going default 1
        #       default_editor "${*}"
        #     }
        # else  # any pattern above or combination fails, --> default to code
        #     {
        #       (( SHOWOUTPUT )) && echo Going default 2
        #       default_editor "${*}"
        #     }
        fi
    }
    # else # not .idea folder then going defaut editor logic
    # {
    #   (( SHOWOUTPUT )) && echo Going default 3
    #   default_editor "${*}"
    # }
    fi
  } # end try_to_guess_editor_from_project_dirs
  default_editor "${*}"
} # end _main

_main "${*}"
